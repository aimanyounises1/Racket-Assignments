#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1           0 1617 0 29 3 11 #"#lang pl 02"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"#|The grammar of the language"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"# Question 1.A"
0 0 17 29 1 #"\n"
0 0 17 3 69
(5
 #"  # we will check if there is ambguity => and yes there is ambiguity "
) 0 0 17 29 1 #"\n"
0 0 17 3 58
#"ambiguity means we have different AST for each parse of SE"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 77
(6
 #"################ Alot of fixes to prevent the ambiguity #############"
 #"########"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"<SE> ::<Str>           (1)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"      |<D>                     (2)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"      |<Char>                  (3)"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"      |{string <Char>}      (4)"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"      |{string-append <Str>} (5)"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"      |{string-insert <Str> <Str> <Char> <D>}  (6)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"      |{number->string <NUM>}  (7)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"      |{string-length <Str>}   (8)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 59
#"# infinite digits for representing the a number in a string"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"<D>::= <Digit> (9)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"       |<Digit> <D>  (10)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"# Represent the empty string"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"<Empty> ::= \316\273 (11)"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"          "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"# Represent a String form digits only"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 64
#"<Str> ::= <\"<D>\"> (12)            # this will return the number "
0 0 17 3 38 #"in a String calling Digit every time. "
0 0 17 29 1 #"\n"
0 0 17 3 29 #"          |<Empty> <Str> (13)"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"          |<Empty>       (14)"
0 0 17 29 1 #"\n"
0 0 17 3 54 #"          |{string-insert <Str> <Str> <Char> <D>} (15)"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"          |{number->string <NUM>}               (16)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"<NUM> ::= |<D> (17) "
0 0 17 29 1 #"\n"
0 0 17 3 38 #"          |{string-length <Str>} (18) "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"# Represent a Char of one Digit"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"<Char> ::= <CHR>    (19)"
0 0 17 29 1 #"\n"
0 0 17 3 91
(7
 #"          |<CHR> <Char> (20)        (15)# This grammar is to apply th"
 #"e String #\\2 #\\3 etc.."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"#Characters from #\\0 #\\1 etc.."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 73
(8
 #"<CHR> ::= #\\0 | #\\1 | #\\2 | #\\3 | #\\4 | #\\5 | #\\6 | #\\7 | #\\"
 #"8 | #\\9  (21)"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"# Digits from 0 - 9"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"<Digit>::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9    (22)"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"           "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 94
(9
 #"# Example to derivative Question 1.B , I've used the number of each g"
 #"rammar to help you check."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"\"12344\" => (12) (Str \"D(1)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"                        D(2)      "
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                            D(3)   "
0 0 17 29 1 #"\n"
0 0 17 3 37 #"                                 D(4)"
0 0 17 29 1 #"\n"
0 0 17 3 54 #"                                     D(4)\") => \"12344\""
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"(parse ({string #\\1 #\\2 #\\4}) => (String"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"                                        CHR(1) Char #\\2 #\\4 "
0 0 17 29 1 #"\n"
0 0 17 3 62
#"                                              CHR(2)  Char #\\2"
0 0 17 29 1 #"\n"
0 0 17 3 68
(10
 #"                                                    CHR(4)) => \"124"
 #"\""
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"# here we can parse the right section first "
0 0 17 29 1 #"\n"
0 0 17 3 87
(11
 #"(parse { string-append { string #\\1 #\\2 #\\4 }  \"12\" })  => (stri"
 #"ng-append(string CHR(1)"
) 0 0 17 29 1 #"\n"
0 0 17 3 93
(12
 #"                                                                     "
 #"                  CHR(2)"
) 0 0 17 29 1 #"\n"
0 0 17 3 24 #"                        "
0 0 17 3 78
(13
 #"                                                                     "
 #"  CHR(4))"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 108
(14
 #"                                                                     "
 #"                                 (\"D(1)"
) 0 0 17 29 1 #"\n"
0 0 17 3 128
(15
 #"                                                                     "
 #"                                         D(2)\")) => \"12412\""
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 122
(16
 #"(parse( number->string ( string-length \"0033344\" ) )) => (number->s"
 #"tring <SE> <SE>) (10) => (number->stirng <STR> <SE>) =>"
) 0 0 17 29 1 #"\n"
0 0 17 3 107
(17
 #"(number->string 13 => \"003334\" <SE>) (11)^6 => (number->string \"00"
 #"33344\" <SE> ) (12) => (number->string    "
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"#|Question 2 |#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"mult"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 81
(18
 #"; Multiply each element this function will be applied on each element"
 #" on the list"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"mult"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 138
(19
 #";Defining the function using lambda expression and and calculating th"
 #"e result with map using foldl every time map will multiply the number"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"mult"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 4 #")]) "
0 0 17 3 80
(20
 #"; Map will do => result = 1*1 => result =1 (using foldl)  result += 2"
 #"*2 etc..   "
) 0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 5 #"foldl"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 4 #"))) "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 2 #"14"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 2 #"21"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 2 #"19"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 2 #"39"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 3 #"124"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 3 #"124"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 3 #"124"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 16 #"createPolynomial"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 25 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"poly"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #") "
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 6 #"Number"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"poly"
0 0 25 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 5 #"power"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 5 #"accum"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"poly"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 25 3 2 #") "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 5 #"power"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 25 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 5 #"power"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"polyX"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"polyX"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"poly"
0 0 25 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 5 #"polyX"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"p2345"
0 0 25 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 5 #"p2345"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 5 #"p2345"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 5 #"p2345"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"p536"
0 0 25 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 4 #"p536"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"expt"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"p_0"
0 0 25 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"p_0"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"The grammar:"
0 0 17 29 1 #"\n"
0 0 17 3 36 #" <PLANG> ::= {{poly <AEs> }{<AEs> }}"
0 0 17 29 1 #"\n"
0 0 17 3 28 #" <AEs> ::= <AE> | <AE> <AEs>"
0 0 17 29 1 #"\n"
0 0 17 3 36 #" <AE> ::= same as described in class"
0 0 17 29 1 #"\n"
0 0 17 3 3 #" |#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 5 #"PLANG"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"Poly"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;this code was provided for us,"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";;therefore i did not test it."
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 3 #"Add"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 3 #"Sub"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 3 #"Mul"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 3 #"Div"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 17 3 36 #";; to convert s-expressions into AEs"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 29 1 #"\n"
0 0 25 3 3 #" [("
0 0 14 3 7 #"number:"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #" [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Add"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #" [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Sub"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #" [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Mul"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #" [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Div"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"bad syntax in ~s\""
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"PLANG"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 17 3 62
#";; parses a string containing a PLANG expressionto a PLANG AST"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"code"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string->sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 4 #"code"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 59
#";; if pattern is poly followed by empty list we throw error"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"   [("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"poly"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"()) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"tai"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 28 #"\"at least one coefficient is"
0 0 19 29 1 #"\n"
0 0 19 3 16 #" required in ~s\""
0 0 25 3 1 #" "
0 0 14 3 4 #"code"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 70
(21
 #";; if pattern is ((poly $non empty list$) $empty list$) we throw erro"
 #"r"
) 0 0 25 29 1 #"\n"
0 0 25 3 5 #"   [("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"poly"
0 0 25 3 1 #" "
0 0 14 3 3 #"hea"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 5 #"()) ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 22 #"\"at least one point is"
0 0 19 29 1 #"\n"
0 0 19 3 16 #" required in ~s\""
0 0 25 3 1 #" "
0 0 14 3 4 #"code"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 80
(22
 #";;otherwise we assume current syntax and use map to parse each of the"
 #" list \"AEs\""
) 0 0 25 29 1 #"\n"
0 0 25 3 5 #"   [("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"poly"
0 0 25 3 1 #" "
0 0 14 3 3 #"hea"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"tai"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 4 #")) ("
0 0 14 3 4 #"Poly"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"hea"
0 0 25 3 3 #") ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"tai"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"bad syntax in ~s\""
0 0 25 29 1 #"\n"
0 0 25 3 16 #"                "
0 0 14 3 4 #"code"
0 0 25 3 5 #")])))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 24 #"\"{{poly 1 2 3} {1 2 3}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"{{poly } {1 2} }\""
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 14 3 7 #"=error>"
0 0 25 3 1 #" "
0 0 19 3 32 #"\"parse: at least one coefficient"
0 0 19 3 3 #" is"
0 0 19 29 1 #"\n"
0 0 19 3 28 #" required in ((poly) (1 2))\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"{{poly 1 2} {} }\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 14 3 7 #"=error>"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"parse: at least one point is"
0 0 19 29 1 #"\n"
0 0 19 3 29 #" required in ((poly 1 2) ())\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"{{pct 1 2} {} }\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 14 3 7 #"=error>"
0 0 25 3 1 #" "
0 0 19 3 37 #"\"parse: bad syntax in ((pct 1 2) ())\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"#|Question 4b|#"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";; evaluates AE expressions to numbers"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";; this question was actually pretty easy 20 minitues"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 2 #"AE"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #"  "
0 0 14 3 6 #"Number"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"[("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"[("
0 0 14 3 3 #"Add"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"[("
0 0 14 3 3 #"Sub"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"[("
0 0 14 3 3 #"Mul"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"[("
0 0 14 3 3 #"Div"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 9 #"eval-poly"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"PLANG"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"eval-poly"
0 0 25 3 1 #" "
0 0 14 3 6 #"p-expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 25 3 2 #"  "
0 0 14 3 6 #"p-expr"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 34 #";; if we have Poly type of variant"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 67
(23
 #";; we create polynomial from evaluating all \"AES\" in the first list"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 109
(24
 #";; then we use the returned function to caculate value at point (whic"
 #"h are parsed from AEs with map and eval)"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"   [("
0 0 14 3 4 #"Poly"
0 0 25 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 25 3 1 #" "
0 0 14 3 6 #"points"
0 0 25 3 3 #") ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 6 #"points"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";; evaluate a FLANG program contained in a string"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"eval-poly"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 24 #"\"{{poly 1 2 3} {1 2 3}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 2 #"17"
0 0 25 3 1 #" "
0 0 22 3 2 #"34"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 24 #"\"{{poly 4 2 7} {1 4 9}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 2 #"13"
0 0 25 3 1 #" "
0 0 22 3 3 #"124"
0 0 25 3 1 #" "
0 0 22 3 3 #"589"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 24 #"\"{{poly 1 2 3} {1 2 3}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 2 #"17"
0 0 25 3 1 #" "
0 0 22 3 2 #"34"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 27 #"\"{{poly 4/5 } {1/2 2/3 3}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 3 #"4/5"
0 0 25 3 1 #" "
0 0 22 3 3 #"4/5"
0 0 25 3 1 #" "
0 0 22 3 3 #"4/5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"{{poly 2 3} {4}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 2 #"14"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"{{poly 1 1 0} {-1 3 3}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #"))"
0           0
